#!/usr/bin/env python
'''
Autogenerated code using arya.py
Original Object Document Input: 
{"totalCount":"1","imdata":[{"fvTenant":{"attributes":{"descr":"","dn":"uni/tn-JAVA-Tenant","name":"JAVA-Tenant","nameAlias":"","ownerKey":"","ownerTag":""},"children":[{"fvAp":{"attributes":{"descr":"","name":"JAVA_AppProfile","nameAlias":"","ownerKey":"","ownerTag":"","prio":"unspecified"},"children":[{"fvAEPg":{"attributes":{"descr":"","fwdCtrl":"","isAttrBasedEPg":"no","matchT":"AtleastOne","name":"App_Servers","nameAlias":"","pcEnfPref":"unenforced","prefGrMemb":"exclude","prio":"unspecified"},"children":[{"fvRsBd":{"attributes":{"tnFvBDName":"App-BD"}}},{"fvRsCustQosPol":{"attributes":{"tnQosCustomPolName":""}}},{"fvRsCons":{"attributes":{"prio":"unspecified","tnVzBrCPName":"App_Contract"}}},{"fvRsDomAtt":{"attributes":{"classPref":"encap","delimiter":"","encap":"vlan-50","encapMode":"auto","instrImedcy":"immediate","netflowPref":"disabled","primaryEncap":"unknown","resImedcy":"immediate","tDn":"uni/phys-JAVA_physical"}}},{"fvRsPathAtt":{"attributes":{"descr":"","encap":"vlan-50","instrImedcy":"immediate","mode":"regular","primaryEncap":"unknown","tDn":"topology/pod-1/paths-101/pathep-[eth1/11]"}}},{"fvRsProv":{"attributes":{"matchT":"AtleastOne","prio":"unspecified","tnVzBrCPName":"App_Contract"}}}]}},{"fvAEPg":{"attributes":{"descr":"","fwdCtrl":"","isAttrBasedEPg":"no","matchT":"AtleastOne","name":"Web_Servers","nameAlias":"","pcEnfPref":"unenforced","prefGrMemb":"exclude","prio":"unspecified"},"children":[{"fvRsBd":{"attributes":{"tnFvBDName":"Web-BD"}}},{"fvRsCustQosPol":{"attributes":{"tnQosCustomPolName":""}}},{"fvRsCons":{"attributes":{"prio":"unspecified","tnVzBrCPName":"App_Contract"}}}]}}]}},{"fvRsTenantMonPol":{"attributes":{"tnMonEPGPolName":""}}},{"vzFilter":{"attributes":{"descr":"","name":"SSH","nameAlias":"","ownerKey":"","ownerTag":""},"children":[{"vzEntry":{"attributes":{"applyToFrag":"no","arpOpc":"unspecified","dFromPort":"22","dToPort":"22","descr":"","etherT":"ip","icmpv4T":"unspecified","icmpv6T":"unspecified","matchDscp":"unspecified","name":"TCP-SSH","nameAlias":"","prot":"tcp","sFromPort":"unspecified","sToPort":"unspecified","stateful":"no","tcpRules":""}}}]}},{"vzFilter":{"attributes":{"descr":"","name":"JAVA_Ping","nameAlias":"","ownerKey":"","ownerTag":""},"children":[{"vzEntry":{"attributes":{"applyToFrag":"no","arpOpc":"unspecified","dFromPort":"unspecified","dToPort":"unspecified","descr":"","etherT":"ip","icmpv4T":"unspecified","icmpv6T":"unspecified","matchDscp":"unspecified","name":"PING","nameAlias":"","prot":"icmp","sFromPort":"unspecified","sToPort":"unspecified","stateful":"no","tcpRules":""}}}]}},{"fvBD":{"attributes":{"arpFlood":"no","descr":"","epMoveDetectMode":"","ipLearning":"yes","limitIpLearnToSubnets":"no","llAddr":"::","mac":"00:22:BD:F8:19:FF","mcastAllow":"no","multiDstPktAct":"bd-flood","name":"Web-BD","nameAlias":"","ownerKey":"","ownerTag":"","type":"regular","unicastRoute":"yes","unkMacUcastAct":"proxy","unkMcastAct":"flood","vmac":"not-applicable"},"children":[{"fvRsBDToNdP":{"attributes":{"tnNdIfPolName":""}}},{"fvRsBDToOut":{"attributes":{"tnL3extOutName":"JAVA_L3_Out"}}},{"fvRsBdToEpRet":{"attributes":{"resolveAct":"resolve","tnFvEpRetPolName":""}}},{"fvRsCtx":{"attributes":{"tnFvCtxName":"Prod-VRF"}}},{"fvRsIgmpsn":{"attributes":{"tnIgmpSnoopPolName":""}}},{"fvSubnet":{"attributes":{"ctrl":"","descr":"","ip":"172.31.1.1/24","name":"","nameAlias":"","preferred":"no","scope":"public","virtual":"no"}}}]}},{"fvBD":{"attributes":{"arpFlood":"no","descr":"","epMoveDetectMode":"","ipLearning":"yes","limitIpLearnToSubnets":"no","llAddr":"::","mac":"00:22:BD:F8:19:FF","mcastAllow":"no","multiDstPktAct":"bd-flood","name":"App-BD","nameAlias":"","ownerKey":"","ownerTag":"","type":"regular","unicastRoute":"yes","unkMacUcastAct":"proxy","unkMcastAct":"flood","vmac":"not-applicable"},"children":[{"fvRsBDToNdP":{"attributes":{"tnNdIfPolName":""}}},{"fvRsBDToOut":{"attributes":{"tnL3extOutName":"JAVA_L3_Out"}}},{"fvRsBdToEpRet":{"attributes":{"resolveAct":"resolve","tnFvEpRetPolName":""}}},{"fvRsCtx":{"attributes":{"tnFvCtxName":"Prod-VRF"}}},{"fvRsIgmpsn":{"attributes":{"tnIgmpSnoopPolName":""}}},{"fvSubnet":{"attributes":{"ctrl":"","descr":"","ip":"172.32.1.1/24","name":"","nameAlias":"","preferred":"no","scope":"public","virtual":"no"}}}]}},{"fvCtx":{"attributes":{"descr":"","knwMcastAct":"permit","name":"Prod-VRF","nameAlias":"","ownerKey":"","ownerTag":"","pcEnfDir":"ingress","pcEnfPref":"unenforced"},"children":[{"fvRsBgpCtxPol":{"attributes":{"tnBgpCtxPolName":""}}},{"fvRsCtxToExtRouteTagPol":{"attributes":{"tnL3extRouteTagPolName":""}}},{"fvRsCtxToEpRet":{"attributes":{"tnFvEpRetPolName":""}}},{"fvRsOspfCtxPol":{"attributes":{"tnOspfCtxPolName":""}}},{"vzAny":{"attributes":{"descr":"","matchT":"AtleastOne","name":"","nameAlias":"","prefGrMemb":"disabled"}}}]}},{"l3extOut":{"attributes":{"descr":"","enforceRtctrl":"export","name":"JAVA_L3_Out","nameAlias":"","ownerKey":"","ownerTag":"","targetDscp":"unspecified"},"children":[{"l3extInstP":{"attributes":{"descr":"","matchT":"AtleastOne","name":"JAVA_extL3_EPG","nameAlias":"","prefGrMemb":"exclude","prio":"unspecified","targetDscp":"unspecified"},"children":[{"fvRsCons":{"attributes":{"prio":"unspecified","tnVzBrCPName":"App_Contract"}}},{"fvRsCustQosPol":{"attributes":{"tnQosCustomPolName":""}}},{"l3extSubnet":{"attributes":{"aggregate":"","descr":"","ip":"0.0.0.0/0","name":"","nameAlias":"","scope":"import-security"}}},{"fvRsProv":{"attributes":{"matchT":"AtleastOne","prio":"unspecified","tnVzBrCPName":"App_Contract"}}}]}},{"l3extLNodeP":{"attributes":{"configIssues":"","descr":"","name":"JAVA_Leaf102","nameAlias":"","ownerKey":"","ownerTag":"","tag":"yellow-green","targetDscp":"unspecified"},"children":[{"l3extLIfP":{"attributes":{"descr":"","name":"JAVA_Leaf102-48","nameAlias":"","ownerKey":"","ownerTag":"","tag":"yellow-green"},"children":[{"l3extRsEgressQosDppPol":{"attributes":{"tnQosDppPolName":""}}},{"l3extRsIngressQosDppPol":{"attributes":{"tnQosDppPolName":""}}},{"l3extRsNdIfPol":{"attributes":{"tnNdIfPolName":""}}},{"l3extRsPathL3OutAtt":{"attributes":{"addr":"10.250.252.226/29","descr":"","encap":"unknown","encapScope":"local","ifInstT":"l3-port","llAddr":"::","mac":"00:22:BD:F8:19:FF","mode":"regular","mtu":"1500","tDn":"topology/pod-1/paths-102/pathep-[eth1/48]","targetDscp":"unspecified"}}},{"ospfIfP":{"attributes":{"authKeyId":"1","authType":"none","descr":"","name":"","nameAlias":""},"children":[{"ospfRsIfPol":{"attributes":{"tnOspfIfPolName":"default"}}}]}}]}},{"l3extRsNodeL3OutAtt":{"attributes":{"rtrId":"10.250.255.51","rtrIdLoopBack":"yes","tDn":"topology/pod-1/node-102"},"children":[{"l3extInfraNodeP":{"attributes":{"descr":"","fabricExtCtrlPeering":"no","name":"","nameAlias":""}}}]}}]}},{"l3extRsEctx":{"attributes":{"tnFvCtxName":"Prod-VRF"}}},{"l3extRsL3DomAtt":{"attributes":{"tDn":"uni/l3dom-JAVA_extL3_Domain"}}},{"ospfExtP":{"attributes":{"areaCost":"1","areaCtrl":"redistribute,summary","areaId":"backbone","areaType":"regular","descr":"","nameAlias":""}}}]}},{"vnsSvcCont":{"attributes":{}}},{"vzBrCP":{"attributes":{"descr":"","name":"App_Contract","nameAlias":"","ownerKey":"","ownerTag":"","prio":"unspecified","scope":"context","targetDscp":"unspecified"},"children":[{"vzSubj":{"attributes":{"consMatchT":"AtleastOne","descr":"","name":"App_Services","nameAlias":"","prio":"unspecified","provMatchT":"AtleastOne","revFltPorts":"yes","targetDscp":"unspecified"},"children":[{"vzRsSubjFiltAtt":{"attributes":{"directives":"","tnVzFilterName":"default"}}}]}}]}}]}}]}
'''
#raise RuntimeError('Please review the auto generated code before ' +
#                    'executing the output. Some placeholders will ' +
#                    'need to be changed')

# list of packages that should be imported for this code to work
import cobra.mit.access
import cobra.mit.request
import cobra.mit.session
import cobra.model.fv
import cobra.model.l3ext
import cobra.model.ospf
import cobra.model.pol
import cobra.model.vns
import cobra.model.vz
from cobra.internal.codec.xmlcodec import toXMLStr

# log into an APIC and create a directory object
ls = cobra.mit.session.LoginSession('https://198.18.133.200', 'admin', 'C1sco12345')
md = cobra.mit.access.MoDirectory(ls)
md.login()

# the top level object on which operations will be made
polUni = cobra.model.pol.Uni('')

# build the request using cobra syntax
fvTenant = cobra.model.fv.Tenant(polUni, ownerKey=u'', name=u'JAVA-Tenant', descr=u'', nameAlias=u'', ownerTag=u'')
fvAp = cobra.model.fv.Ap(fvTenant, ownerKey=u'', name=u'JAVA_AppProfile', prio=u'unspecified', descr=u'', nameAlias=u'', ownerTag=u'')
fvAEPg = cobra.model.fv.AEPg(fvAp, isAttrBasedEPg=u'no', matchT=u'AtleastOne', name=u'App_Servers', descr=u'', fwdCtrl=u'', prefGrMemb=u'exclude', nameAlias=u'', prio=u'unspecified', pcEnfPref=u'unenforced')
fvRsBd = cobra.model.fv.RsBd(fvAEPg, tnFvBDName=u'App-BD')
fvRsCustQosPol = cobra.model.fv.RsCustQosPol(fvAEPg, tnQosCustomPolName=u'')
fvRsCons = cobra.model.fv.RsCons(fvAEPg, tnVzBrCPName=u'App_Contract', prio=u'unspecified')
fvRsDomAtt = cobra.model.fv.RsDomAtt(fvAEPg, tDn=u'uni/phys-JAVA_physical', primaryEncap=u'unknown', classPref=u'encap', delimiter=u'', instrImedcy=u'immediate', encap=u'vlan-50', encapMode=u'auto', netflowPref=u'disabled', resImedcy=u'immediate')
fvRsPathAtt = cobra.model.fv.RsPathAtt(fvAEPg, tDn=u'topology/pod-1/paths-101/pathep-[eth1/11]', descr=u'', primaryEncap=u'unknown', instrImedcy=u'immediate', mode=u'regular', encap=u'vlan-50')
fvRsProv = cobra.model.fv.RsProv(fvAEPg, tnVzBrCPName=u'App_Contract', matchT=u'AtleastOne', prio=u'unspecified')
fvAEPg2 = cobra.model.fv.AEPg(fvAp, isAttrBasedEPg=u'no', matchT=u'AtleastOne', name=u'Web_Servers', descr=u'', fwdCtrl=u'', prefGrMemb=u'exclude', nameAlias=u'', prio=u'unspecified', pcEnfPref=u'unenforced')
fvRsBd2 = cobra.model.fv.RsBd(fvAEPg2, tnFvBDName=u'Web-BD')
fvRsCustQosPol2 = cobra.model.fv.RsCustQosPol(fvAEPg2, tnQosCustomPolName=u'')
fvRsCons2 = cobra.model.fv.RsCons(fvAEPg2, tnVzBrCPName=u'App_Contract', prio=u'unspecified')
fvRsTenantMonPol = cobra.model.fv.RsTenantMonPol(fvTenant, tnMonEPGPolName=u'')
vzFilter = cobra.model.vz.Filter(fvTenant, ownerKey=u'', ownerTag=u'', name=u'SSH', descr=u'', nameAlias=u'')
vzEntry = cobra.model.vz.Entry(vzFilter, tcpRules=u'', arpOpc=u'unspecified', applyToFrag=u'no', dToPort=u'22', descr=u'', nameAlias=u'', matchDscp=u'unspecified', prot=u'tcp', icmpv4T=u'unspecified', sFromPort=u'unspecified', stateful=u'no', icmpv6T=u'unspecified', sToPort=u'unspecified', etherT=u'ip', dFromPort=u'22', name=u'TCP-SSH')
vzFilter2 = cobra.model.vz.Filter(fvTenant, ownerKey=u'', ownerTag=u'', name=u'JAVA_Ping', descr=u'', nameAlias=u'')
vzEntry2 = cobra.model.vz.Entry(vzFilter2, tcpRules=u'', arpOpc=u'unspecified', applyToFrag=u'no', dToPort=u'unspecified', descr=u'', nameAlias=u'', matchDscp=u'unspecified', prot=u'icmp', icmpv4T=u'unspecified', sFromPort=u'unspecified', stateful=u'no', icmpv6T=u'unspecified', sToPort=u'unspecified', etherT=u'ip', dFromPort=u'unspecified', name=u'PING')
fvBD = cobra.model.fv.BD(fvTenant, ownerKey=u'', vmac=u'not-applicable', unkMcastAct=u'flood', name=u'Web-BD', descr=u'', unicastRoute=u'yes', unkMacUcastAct=u'proxy', arpFlood=u'no', limitIpLearnToSubnets=u'no', llAddr=u'::', mcastAllow=u'no', mac=u'00:22:BD:F8:19:FF', epMoveDetectMode=u'', nameAlias=u'', ownerTag=u'', multiDstPktAct=u'bd-flood', type=u'regular', ipLearning=u'yes')
fvRsBDToNdP = cobra.model.fv.RsBDToNdP(fvBD, tnNdIfPolName=u'')
fvRsBDToOut = cobra.model.fv.RsBDToOut(fvBD, tnL3extOutName=u'JAVA_L3_Out')
fvRsBdToEpRet = cobra.model.fv.RsBdToEpRet(fvBD, resolveAct=u'resolve', tnFvEpRetPolName=u'')
fvRsCtx = cobra.model.fv.RsCtx(fvBD, tnFvCtxName=u'Prod-VRF')
fvRsIgmpsn = cobra.model.fv.RsIgmpsn(fvBD, tnIgmpSnoopPolName=u'')
fvSubnet = cobra.model.fv.Subnet(fvBD, name=u'', descr=u'', ctrl=u'', ip=u'172.31.1.1/24', preferred=u'no', virtual=u'no', nameAlias=u'')
fvBD2 = cobra.model.fv.BD(fvTenant, ownerKey=u'', vmac=u'not-applicable', unkMcastAct=u'flood', name=u'App-BD', descr=u'', unicastRoute=u'yes', unkMacUcastAct=u'proxy', arpFlood=u'no', limitIpLearnToSubnets=u'no', llAddr=u'::', mcastAllow=u'no', mac=u'00:22:BD:F8:19:FF', epMoveDetectMode=u'', nameAlias=u'', ownerTag=u'', multiDstPktAct=u'bd-flood', type=u'regular', ipLearning=u'yes')
fvRsBDToNdP2 = cobra.model.fv.RsBDToNdP(fvBD2, tnNdIfPolName=u'')
fvRsBDToOut2 = cobra.model.fv.RsBDToOut(fvBD2, tnL3extOutName=u'JAVA_L3_Out')
fvRsBdToEpRet2 = cobra.model.fv.RsBdToEpRet(fvBD2, resolveAct=u'resolve', tnFvEpRetPolName=u'')
fvRsCtx2 = cobra.model.fv.RsCtx(fvBD2, tnFvCtxName=u'Prod-VRF')
fvRsIgmpsn2 = cobra.model.fv.RsIgmpsn(fvBD2, tnIgmpSnoopPolName=u'')
fvSubnet2 = cobra.model.fv.Subnet(fvBD2, name=u'', descr=u'', ctrl=u'', ip=u'172.32.1.1/24', preferred=u'no', virtual=u'no', nameAlias=u'')
fvCtx = cobra.model.fv.Ctx(fvTenant, ownerKey=u'', name=u'Prod-VRF', descr=u'', knwMcastAct=u'permit', pcEnfDir=u'ingress', nameAlias=u'', ownerTag=u'', pcEnfPref=u'unenforced')
fvRsBgpCtxPol = cobra.model.fv.RsBgpCtxPol(fvCtx, tnBgpCtxPolName=u'')
fvRsCtxToExtRouteTagPol = cobra.model.fv.RsCtxToExtRouteTagPol(fvCtx, tnL3extRouteTagPolName=u'')
fvRsCtxToEpRet = cobra.model.fv.RsCtxToEpRet(fvCtx, tnFvEpRetPolName=u'')
fvRsOspfCtxPol = cobra.model.fv.RsOspfCtxPol(fvCtx, tnOspfCtxPolName=u'')
vzAny = cobra.model.vz.Any(fvCtx, prefGrMemb=u'disabled', matchT=u'AtleastOne', name=u'', descr=u'', nameAlias=u'')
l3extOut = cobra.model.l3ext.Out(fvTenant, ownerKey=u'', name=u'JAVA_L3_Out', descr=u'', targetDscp=u'unspecified', enforceRtctrl=u'export', nameAlias=u'', ownerTag=u'')
l3extInstP = cobra.model.l3ext.InstP(l3extOut, matchT=u'AtleastOne', name=u'JAVA_extL3_EPG', prio=u'unspecified', targetDscp=u'unspecified', prefGrMemb=u'exclude', nameAlias=u'', descr=u'')
fvRsCons3 = cobra.model.fv.RsCons(l3extInstP, tnVzBrCPName=u'App_Contract', prio=u'unspecified')
fvRsCustQosPol3 = cobra.model.fv.RsCustQosPol(l3extInstP, tnQosCustomPolName=u'')
l3extSubnet = cobra.model.l3ext.Subnet(l3extInstP, name=u'', descr=u'', ip=u'0.0.0.0/0', nameAlias=u'', aggregate=u'')
fvRsProv2 = cobra.model.fv.RsProv(l3extInstP, tnVzBrCPName=u'App_Contract', matchT=u'AtleastOne', prio=u'unspecified')
l3extLNodeP = cobra.model.l3ext.LNodeP(l3extOut, ownerKey=u'', name=u'JAVA_Leaf102', descr=u'', targetDscp=u'unspecified', tag=u'yellow-green', nameAlias=u'', ownerTag=u'')
l3extLIfP = cobra.model.l3ext.LIfP(l3extLNodeP, ownerKey=u'', name=u'JAVA_Leaf102-48', descr=u'', tag=u'yellow-green', nameAlias=u'', ownerTag=u'')
l3extRsEgressQosDppPol = cobra.model.l3ext.RsEgressQosDppPol(l3extLIfP, tnQosDppPolName=u'')
l3extRsIngressQosDppPol = cobra.model.l3ext.RsIngressQosDppPol(l3extLIfP, tnQosDppPolName=u'')
l3extRsNdIfPol = cobra.model.l3ext.RsNdIfPol(l3extLIfP, tnNdIfPolName=u'')
l3extRsPathL3OutAtt = cobra.model.l3ext.RsPathL3OutAtt(l3extLIfP, addr=u'10.250.252.226/29', descr=u'', encapScope=u'local', targetDscp=u'unspecified', llAddr=u'::', mac=u'00:22:BD:F8:19:FF', mode=u'regular', encap=u'unknown', ifInstT=u'l3-port', mtu=u'1500', tDn=u'topology/pod-1/paths-102/pathep-[eth1/48]')
ospfIfP = cobra.model.ospf.IfP(l3extLIfP, authKeyId=u'1', authType=u'none', name=u'', descr=u'', nameAlias=u'')
ospfRsIfPol = cobra.model.ospf.RsIfPol(ospfIfP, tnOspfIfPolName=u'default')
l3extRsNodeL3OutAtt = cobra.model.l3ext.RsNodeL3OutAtt(l3extLNodeP, rtrIdLoopBack=u'yes', rtrId=u'10.250.255.51', tDn=u'topology/pod-1/node-102')
l3extInfraNodeP = cobra.model.l3ext.InfraNodeP(l3extRsNodeL3OutAtt, nameAlias=u'', fabricExtCtrlPeering=u'no', descr=u'', name=u'')
l3extRsEctx = cobra.model.l3ext.RsEctx(l3extOut, tnFvCtxName=u'Prod-VRF')
l3extRsL3DomAtt = cobra.model.l3ext.RsL3DomAtt(l3extOut, tDn=u'uni/l3dom-JAVA_extL3_Domain')
ospfExtP = cobra.model.ospf.ExtP(l3extOut, areaCtrl=u'redistribute,summary', areaId=u'backbone', areaType=u'regular', descr=u'', nameAlias=u'', areaCost=u'1')
vnsSvcCont = cobra.model.vns.SvcCont(fvTenant)
vzBrCP = cobra.model.vz.BrCP(fvTenant, ownerKey=u'', name=u'App_Contract', prio=u'unspecified', targetDscp=u'unspecified', descr=u'', nameAlias=u'', ownerTag=u'')
vzSubj = cobra.model.vz.Subj(vzBrCP, revFltPorts=u'yes', name=u'App_Services', prio=u'unspecified', targetDscp=u'unspecified', nameAlias=u'', descr=u'', consMatchT=u'AtleastOne', provMatchT=u'AtleastOne')
vzRsSubjFiltAtt = cobra.model.vz.RsSubjFiltAtt(vzSubj, directives=u'', tnVzFilterName=u'default')


# commit the generated code to APIC
print toXMLStr(polUni)
c = cobra.mit.request.ConfigRequest()
c.addMo(fvTenant)
md.commit(c)

